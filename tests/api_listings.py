import requests

BASE_URL = "http://localhost:8000/api"


class RentalsApi:
    def __init__(self, role):
        self.username = f"test_{role}"
        self.password = "Testpass123!"
        self.role = role
        self.token = None
        self.headers = {}
        self.register_if_needed()
        self.login()

    def register_if_needed(self):
        url = f"{BASE_URL}/auth/register/"
        data = {
            "username": self.username,
            "email": f"{self.username}@example.com",
            "password": self.password,
            "password2": self.password,
            "role": self.role
        }
        response = requests.post(url, json=data)
        if response.status_code not in (201, 400):
            raise Exception(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}")

    def login(self):
        url = f"{BASE_URL}/auth/login/"
        data = {
            "username": self.username,
            "password": self.password
        }
        response = requests.post(url, json=data)
        assert response.status_code == 200, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.text}"
        self.token = response.json().get("access")
        self.headers = {"Authorization": f"Bearer {self.token}"}

    # üìå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    def create_listing(self, title, price, location):
        url = f"{BASE_URL}/listings/"
        data = {
            "title": title,
            "price": price,
            "location": location,
            "description": "Test description",
            "rooms": 2,
            "housing_type": "apartment",
            "contact_info": "landlord@example.com"
        }
        response = requests.post(url, json=data, headers=self.headers)
        assert response.status_code == 201, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.text}"
        return response.json()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    def get_listings(self):
        url = f"{BASE_URL}/listings/"
        response = requests.get(url, headers=self.headers)
        assert response.status_code == 200, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {response.text}"
        return response.json()


if __name__ == "__main__":
    # –¢–æ–ª—å–∫–æ landlord –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    landlord = RentalsApi("landlord")
    new_listing = landlord.create_listing("Cozy Flat", 1800, "Amsterdam West")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {new_listing['title']}")

    # Tenant –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    tenant = RentalsApi("tenant")
    listings = tenant.get_listings()
    print(f"üìÑ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º: {len(listings)}")
    assert any(l["title"] == "Cozy Flat" for l in listings), "‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    print("‚úÖ –¢–µ—Å—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã")
